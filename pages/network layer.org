* #networking, #todo
* Where it lives?
This layer is found in 2 places, the host and the router, this make it a bit hard to understand at first.
Internally it could be divided in *data plane* and *control plane*.
The *control plane* compute a *forwarding table* (generated through *Routing* algos) that will be used by the *data plane* to forward (*forwarding*) the data.
* Introduction
** Overview
[[../assets/network-layer-overview.png]]
** Control and Data plane separation 2 approach
*** Control plane inside the router
[[../assets/control-plane-inside-the-router.jpg]]
*** Control plane on a remote server
[[../assets/control-plane-Software-Defined_Networking_SDN.jpg]]
*** Service model 
:PROPERTIES:
:id: 6391b780-70e0-4704-b235-94fe1087e2e4
:END:
The network layer offer a service called *Best Effort*.
What it guarantees:
1. deliver not guaranteed
2. minimum bandwidth not guaranteed
3. ordered delivery not guaranteed (the packets are delivered in the same order they are sended)
4. it offer encryption services
* What's inside a router
:PROPERTIES:
:collapsed: true
:END:
** For an in depth study see page 255 of [[Computer Networking a Top Down Approach]].
** Overview
As you can evince from the overview, the lower part, input port, output port and switch fabric are implemented in hardware, this is a requirement to reach the maximum speed.
[[../assets/router-architecture-overview.png]]
** Forwarding approachs
*** Generalized forwarding
There are some rule that are used to forward the packet.
I.E. the packet for a google resource must take the first output port and the packet for Microsoft Outlook must go to the third output port.
*** Destination based forwarding
Let me explain with an analogy:
1. before you enter a roundabout there is a road toll booth.
2. before you can proceed you must say at toll booth where you are going 
3. the employee tell you which you have to take in the roundabout
** Input Port
When a packet reach an import port it is routed to the correct output port through the switch fabric using a forwarding table made by the routing processor.
After the first packet of a stream get an output port, a copy of the forwarding table is stored in the input port so the next packets can go faster.
** Switching Fabric
It connect, *physically*, the input port with the output port, basically it's a network (inside another network).
** Output Port
** Routing Processor
Execute the *Control Plane* function, both classic router and SDN operates here.
** Buffers size (input & output)
When a packet cannot be instantly consumed it is stored in a buffer, when this kind of buffers are full the packet is dropped (this what cause packet loss in the upper layers).
So how big the buffers should be?
*** A classical approach suggest:
$Buff Size = RTT\cdot C$, where ~RTT~ is the ~Round Time Trip~ and ~C~ is the ~link capacity~.
*** A more modern study suggest that when there are ~N~ TCP connections:
$BuffSize = RTT\cdot \frac{C}{\sqrt{N}}$
*** Note
+ A  buffer to big will increase the ~queuing time~.
+ A buffer full of TCP connection will have a rough time to free space in the buffer, after an ACK a new packet will come and /re-full/ the buffer.
+ This problem is known as ~bufferbloat~
***
* Packet Scheduling
As always there are more than one solution:
** Good old [[FIFO]] (aka FCFS - First-Come-First-Served)
** Priority Queue
Each packet is label with a priority level.
Each priority class has his own queue, i.e. HTTP has more priority than SSH, SSH more than IMAP and so on.
If the queue is ~not preemptive~ it is not possible to interrupt the forwarding of a packet.
The priority levels and classes are decided by the ISP.
** Round Robin & WFQ
~WRQ := Weighted Fair Queueing~
The packets are divided into class, without a rigid service priority.
Then each class is served round robin style.
[[../assets/wfq.png]]
* IP
** IPv4
The packet at the ~network layer~ is known as ~DATAGRAM~.
*** Datagram Structure
[[../assets/ipv4-datagram.png]]
**** ~Version~ 4 bit
Contains an identifier that allow the router to recognize correctly the datagram.
**** ~Header length~ 4 bit
All the fields of an IPv4 datagram have a fixed length except for the option header which could vary.
Typically an IP datagram doesn't have extra options, this means that usually an IP datagram is 20 bytes long.
**** ~Type of service~ 8 bit
Aka ~TOS~, it's used to distinguish  between datagram that need low latency, i.e. ~VoIP~, or a datagram that don't prioritize latency, like ~FTP~.
~2 bit~ of the TOS are used to explicitly notify the upper layer that there is congestion on the network.
Don't confuse this with the type of protocol used.
**** ~Datagram length~ 16 bit
Total length of the IP datagram, they can vary from 0 (useless!) to 65355 (to big!).
The most common size is ~1500~ (see ((638f4ca9-1e6c-47be-b5c4-68b7dfcfc0f7)) in particular the ~MTU~).
1500 is preferred because it is the maximum size for a ~Ethernet frame~ on the [[link layer]] (the layer below).
**** ~Identifier, Flag & fragmentation offset~ (16 + 3 + 13) bit
[[TODO]]
**** ~TTL~ 8 bit
**** ~Protocol~ 8 bit
This field is used when the datagram reaches the destination.
Specify which protocol should receive the data, for example the value ~6~ specify ~TCP~, ~17~ ~UDP~, and so on (see ~IANA Protocol Numbers 2016~).
**** ~Checksum~ 16 bit
The IP checksum is applied only to the header, essentially is equal to ((63847bd7-3bb8-4a68-abf6-4ff167421a32)) in [[UDP]].
The checksum is computed as ~sum of 1 complement of each 8 byte in the header~, the router that receive the datagram re-compute the checksum an try to match to the stored one
Note that each router that receive the datagram must recompute the checksum before forwarding it, this because the ~TTL~ has changed.
**** ~Source IP~ & ~Destination IP~
When an host send a datagram it put the destination IP in the ~destination field~ and it's own IP in the ~source field~.
**** ~Options~
Used only on high end router.
**** ~Data~ or ~Payload~
Data from/to the layer above.
In the case of [[TCP]] we have ~20 bytes~ for the IP header and ~20 bytes~ for the [[TCP]] header, hence for the payload we have $MTU - 40 bytes$ (since the MTU is usually ~1500 bytes~ we get that the payload could be, at most ~1460 bytes~).
*** IPv4 routing
Usually an host have only one link with the network.
The border between an host and a physical link is called ~interface~, see ~ip a ~
#+BEGIN_SRC shell
[nto@fedora ~]$ ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: enp2s0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc fq_codel state DOWN group default qlen 1000
    link/ether ***************************************
3: wlp4s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether ***************************************
    inet 192.168.123.140/24 brd 192.168.123.255 scope global dynamic noprefixroute wlp4s0
       valid_lft 2465sec preferred_lft 2465sec
    inet6 ***************************** scope link noprefixroute 
       valid_lft forever preferred_lft forever
#+END_SRC
On the other hand a router must be connected to ~at least 2 link~.
The /borders/ on a router are also called ~interfaces~.
Since that both router and host can send and receive datagram IP *require* that each interfaces must have an ~IP address~.
This mean that:
~An IP address is associated with an interface, not with a single host~
*** IPv4 address
They are 32 bit long, hence there are $2^{32}$  possible IPs.
They are described with a dotted decimal notation.
#+BEGIN_EXAMPLE
IP := 192.32.216.9 <==> 11000001 00100000 11011000 00001001
#+END_EXAMPLE
All the devices connected to Internet have an unique IP, except the devices manged by NAT (see later).
That IP can't be chosen at random.
IP address have a ~subnet mask~ used to create subnet, also called ~IP network~.
[[../assets/ipv4-interfaces-and-subnetting.png]]
See [[ipcalc]] for an intro on how to calculate subnets.
** ~Classless InterDomain Routing~ aka ~CIDR~
It is a generalization of the subnetting concept.
The IP is, as before, represented with a dotted decimal notation with an extra ~/xx~ which represent the number of bit used to identify the network name, the remaining $32 - xx $ bit can be used to identify hosts on the network.
Visually ~a.b.c.d/xx~, here ~a.b.c.d~ is the IP and ~/xx~ are the bit used to identify the network.
The first part, the ~x bits~ are used to create the ~forwarding table~.
Examples:
~192.168.1.0/24~, 24 bit are for the network, hence ~192.168.1.0~ is network name and the number from ~192.168.1.1~ to ~192.168.1.255~ can be used for the hosts.
We will see later that some address are already taken for some purpose.
*** ~Broadcast IP~
When a datagram is sended to ~255.255.255.255~ it is sended to all the hosts on the network, this is called ~Broadcast IP~.
* [[ICANN]] 
~ICANN~ stands for ~Internet Corporation for Assigned Names and Numbers~.
It is a non-profit company that take care of assign IP's block (and also DNS root server).
* [[DHCP]]
When a company acquire a block of IP address, usually they (the network engineer/manager) assign this IPs to the routers on the network, in some case also to some specific host, however it doesn't do it for every host, instead they place an DHCP Server on the router, then the DHCP protocol take care of assigns the IPs to the hosts.
* [[NAT]]
It is used to /slowdown the IP consumption/.
* IPv6
This new version use more bit that IPv4, hence it admit a greater number of IPs.
** Datagram Structure
[[../assets/IPv6-datagram.png]]
*** ~Version~
Specify the version, i.e. ~IPv4~ or ~IPv6~
*** ~Traffic class~
Similar to ~TOS~ type of service in IPv4.
It can be used to give priority to some datagram.
*** ~Flow label~
In the RFCs for the IPv6 there is the elusive definition of ~flow~ of data, there is a debate on what is a stream or not.
A guideline could be: /all the data that belong to a specific flow, like a video, a file, etc.../
*** ~Payload length~
Selfexplanatory
*** ~Next hdr~
The protocol that will use the data in the payload.
*** ~Hop limit~
A new form of ~TTL~, each time a datagram go through a new host the hop limit is decreased, when reaches ~0~ the datagram is discarded.
*** ~Source addr~ & ~Dest. addr~
Selfexplanatory.
They are 128 bit long so there is no problem of shortage of IPs.
*** ~Data~
The payload
** Notes on IPv6
*** No checksum
Since there are a checksum also in the upper layer, [[UDP]], [[TCP]], etc, the engineers of the [[IETF]] have take the decision of remove the checksum from the IPv6 datagram.
It was removed from IPv4 to IPv6 also because the computation of the checksum, while it is easy to compute, must be repeated at each router ending in a non zero overhead.
*** No fragmentation
IPv4 support fragmentation of the datagram (through the headers id, and offset), this is quite expensive to do in a router, basically when in IPv4 a router receive a datagram to big it split the fragment in smaller piece and forward them, then the datagram will be recomposed. 
Since this operation is expensive especially on machine like home router, but also on professional level router, the engineers of [[IETF]] removed this option.
When a router receive a datagram to big send an [[ICMP]] (i.e. datagram to big) message to the sender, then sender re-transmit the datagram using a smaller MTU.
This work done on the end system is cheaper.
*** No more Option
*** The IPv6 datagram is smaller than IPv4
*** Interoperability with IPv4
IPv6 is retrocompatible with IPv4, the viceversa is not true.
** From IPv4 to IPv6
This transition is quite difficult, the easiest way is to choice a day in which the whole internet will be powered off and do the upgrade, but this is quite problematic as solution.
A less drastic solution is to use ~tunneling~, it's easy to explain with an example:
#+BEGIN_EXAMPLE
Imagine a chain of router that want to communicate, say they are: A, B, C, D, E, F
A, B, E, F works with IPv6
C, D with IPv4
When B want to send a message to E or F, it wrap its datagram in a IPv4 datagram, in this case the ~TOS~ is not an upper layer but IPv6, and send it through C.
Then D send to E, E unpack the IPv6 datagram and proceed.
#+END_EXAMPLE
* Generalized Forwarding and SDN.
A generalized version of Forwarding can be imagined with a ~match-action~ system.
When there is a ~match~ the system responde