* #programming, #networking, #TCP, #UDP
* UDP
Before a packet of information can be sended on UDP we need to add information about the port and the [[IP]] address of the receiver.
** Scheme
Scheme of the communication.
[[../assets/udp_programming_scheme.png]]
** Server
#+begin_src python
from socket import *

serverPort = 12000
serverSocket = socket(AF_INET, SOCK_DGRAM)

serverSocket.bind(('', serverPort)) # '' bind to localhost

print("The server is ready to receive")

while True:
    message, clientAddress = serverSocket.recvfrom(2048)
    modifiedMessage = message.decode().upper()
    print(f"Message := {modifiedMessage}\tClient := {clientAddress}")
    serverSocket.sendto(modifiedMessage.encode(), clientAddress)
#+end_src
** Client
#+BEGIN_SRC python
from socket import *

serverName = 'localhost'
serverPort = 12000

clientSocket = socket(AF_INET, SOCK_DGRAM)

message = input('Say something: ')
clientSocket.sendto(message.encode(), (serverName, serverPort))
modifiedMessage, serverAddress = clientSocket.recvfrom(2048)

print(modifiedMessage.decode())
clientSocket.close()
#+END_SRC
* TCP
** Scheme
Scheme for the communication
[[../assets/tcp_programming_scheme.png]]
** Server
#+BEGIN_SRC python
from socket import *

serverPort = 12001
serverSocket = socket(AF_INET, SOCK_STREAM)
serverSocket.bind(('', serverPort))
serverSocket.listen(1)

print("Server ready")

while True:
    connectionSocket, addr = serverSocket.accept()
    sentence = connectionSocket.recv(2048).decode().upper()
    print(f"Sentence := {sentence}\tAddr := {addr}")
    connectionSocket.send(sentence.encode())
    connectionSocket.close()
#+END_SRC
** Client

#+BEGIN_SRC python
from socket import *

serverName = 'localhost'
serverPort = 12001

clientSocket = socket(AF_INET, SOCK_STREAM)
clientSocket.connect((serverName, serverPort))

sentence = input('say something: ')

clientSocket.send(sentence.encode())

modifiedSentence = clientSocket.recv(2048).decode()
print(f"from server: {modifiedSentence}")

clientSocket.close()
#+END_SRC
