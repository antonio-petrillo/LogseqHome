* #networking
* It is in between [[application layer]] and [[network layer]].
* What it does
The information a this level is called *segment* or *datagram*, usually *segment* is for [[TCP]]  and *datagram* for [[UDP]] ,  this is just a guideline a lot of authors use them interchangeably.
When a *message* is received from [[application layer]] and they are to big they are divided in multiple segments, in any case they are sended to [[network layer]] .
On the other hand when it receive a *datagram* from the [[network layer]] recompose, *if and only if* the chosen protocol at this level permit it, and the send it to the [[application layer]].
* Protocol at this level
Lately there some new protocol at this level, but the most famous, hence the most important, are [[TCP]] and [[UDP]].
* Note on the underlying level
The [[network layer]], aka [[network layer][IP]] layer is a *Best Effort* protocol, it does whatever it can does to deliver all the information, but it isn't guaranteed, here the *transport layer* can provide *reliability* using the [[TCP]].
* Multiplexing and Demultiplexing
:PROPERTIES:
:id: 638382c2-012a-41c9-957e-c7164bf1e507
:END:
** The main purpose of [[TCP]] and [[UDP]] is to extend [[network layer][IP]] from *host-to-host* communication to *process-to-process* communication.
Basically [[network layer][IP]] send the data from one host to the other, but this is not enough and the transport layer shunts the data to the specific process
** Example
From my PC I send an [[HTTP]] request to a web server, when my request reach the server it should be *redirect* to the process that identify the web server, usually on a server there could be multiple services, just imagine that the server has also a mail server running then if my HTTP request go to a mail server I can't expect a proper response.
On the same example imagine that the web server send a proper HTTP response, now on my PC that response should be shunt to the browser process.
** Definition
The job of redirecting the data from the network to the right process is called *demultiplexing*.
The job of take the data, eventually from multiple socket, encapsulate them with the *transport layer information* (that will be used later from the *demultiplexing*) and pass the to the [[network layer]] is called *multiplexing*.
** Datagram format
[[../assets/generic_datagram_format.png]]
Each *datagram* has the *source port* and the *destination port*, this information will be used by *multiplexing* and *demultiplexing*.
The ports are identified by numbers they could go from [$0, 2^{16}$], so this means [$0, 65535$].
The idea is simple if ~process 1~ send a datagram to ~process 2~ on another host, or even on the same the thing that count is that it is at least another process, and say they have respectively ports ~12345~ and ~54321~ then the first 32 bits will be:
|source port| destination port|
|12345|54321|
Here I've written them in decimal, but in the datagram they will be in binary.
Know the *transport layer* know that the datagram from ~12345~ should be delivered to ~54321~.
* Principle of an reliable connection