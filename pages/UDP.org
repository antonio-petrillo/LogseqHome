* #networking, #protocol, #todo
* User Datagram Protocol
Unreliable data transfer, this is [[transport layer]] protocol.
It is a connectionless protocol, hence it didn't do a handshake before the communication begin, like it happens in [[TCP]].
* Multiplexing and Demultiplexing
UDP does nothing fancy about multiplexing and demultiplexing.
The process explained [[transport layer][here]] is the technique used by UDP.
It read the destination port and send the data to that port, hence to the process that uses that port.
You can also watch:
 {{embed ((637fa0c7-3e12-4ac0-a1b2-60ab9f78c78b))}}
Here ~recvfrom~ is used to get the client address and the port, so they can be used to send a response back.
* UDP structure
UDP add 8 byte, the header, to each datagram, while [[TCP]] use 20 bytes.
[[../assets/udp-header-structure.png]]
* Error checking
UDP perform a simple error checking process on the datagram, in particular it uses a [[checksum]].
** Checksum
*** Sender
Do a 1-complement of the sum of all ~16 bit~ words, an eventual carry bit will be added to the first bit.
This value will be putted in the ~checksum~ header.
*** Receiver
Do the sum of all the ~16 bit~ words and also sum the ~checksum~ the result must be ~1111 1111  1111 1111~.
*** Note
This doesn't guarantee the integrity, for example there could be multiple error that balance themselves and give the desired checksum even there was an error.
This is way this is considered a simple approach, but it is fast and (I think) work on most of the case.
* RFCs
+ RFC 768